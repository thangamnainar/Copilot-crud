const LicenseManagerImp = {
    licenseKey: undefined,
    passKey: undefined,
    valid: false,
    verified: false,
    verify: function (licenseKey, passKey) {
        [LicenseManagerImp.licenseKey, LicenseManagerImp.passKey] = [licenseKey, passKey];
        LicenseManagerImp.valid = LicenseManagerImp.verified = false;
    },
    check: async function () {
        if (!LicenseManagerImp.verified) {
            const isClient = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
            LicenseManagerImp.verified = isClient;
            let valid = false;
            try {
                const plaintext = await LicenseManagerImp.aesGcmDecrypt(LicenseManagerImp.licenseKey, LicenseManagerImp.passKey);
                const tokens = plaintext.split('_');
                const licenseDate = new Date(parseInt(tokens[2]));
                if (tokens.length !== 5) {
                    valid = false;
                }
                else if (tokens[0].length !== 2) {
                    valid = false;
                }
                else if (isNaN(parseInt(tokens[1]))) {
                    valid = false;
                }
                else if (licenseDate <= new Date()) {
                    valid = false;
                }
                else if (tokens[3] !== 'PRIMENG') {
                    valid = false;
                }
                else if (tokens[4].length !== 6) {
                    valid = false;
                }
                else {
                    valid = true;
                }
            }
            catch (e) {
                valid = false;
            }
            if (!valid && isClient) {
                const link = document.createElement('a');
                link.setAttribute('href', 'https://primeng.org/lts');
                link.setAttribute('style', 'background-color: red !important; color: white !important; cursor: pointer !important; font-size: 14px !important; font-weight: bold !important; position: fixed !important; z-index: 9999999999 !important; top: 0 !important; left: 0 !important; display: inline !important; width: 100% !important; padding: 1rem !important; opacity: 1 !important; pointer-events: auto !important; visibility: visible !important;');
                const msg = document.createElement('marquee');
                msg.setAttribute('behavior', 'alternate');
                msg.innerText = 'You are using an LTS version of PrimeNG with an invalid license, you may either switch back to a non-LTS version or purchase a license at PrimeStore.';
                link.appendChild(msg);
                document.body.appendChild(link);
                let linkObserver, documentObserver;
                const observerCallback = () => {
                    linkObserver.disconnect();
                    documentObserver.disconnect();
                    link && link.remove();
                    LicenseManagerImp.verified = false;
                    LicenseManagerImp.check();
                };
                linkObserver = new MutationObserver(() => observerCallback());
                linkObserver.observe(link, { attributes: true, childList: true });
                documentObserver = new MutationObserver((_) => _.forEach((mutation) => mutation.removedNodes.length > 0 && mutation.removedNodes.forEach((item) => item.isSameNode(link) && observerCallback())));
                documentObserver.observe(document.body, { childList: true });
            }
            LicenseManagerImp.valid = valid;
        }
        return LicenseManagerImp.valid;
    },
    aesGcmDecrypt: async function (ciphertext, password) {
        const pwUtf8 = new TextEncoder().encode(password);
        const pwHash = await crypto.subtle.digest('SHA-256', pwUtf8);
        const ivStr = atob(ciphertext).slice(0, 12);
        const iv = new Uint8Array(Array.from(ivStr).map((ch) => ch.charCodeAt(0)));
        const alg = { name: 'AES-GCM', iv: iv };
        const key = await crypto.subtle.importKey('raw', pwHash, alg, false, ['decrypt']);
        const ctStr = atob(ciphertext).slice(12);
        const ctUint8 = new Uint8Array(Array.from(ctStr).map((ch) => ch.charCodeAt(0)));
        try {
            const plainBuffer = await crypto.subtle.decrypt(alg, key, ctUint8);
            const plaintext = new TextDecoder().decode(plainBuffer);
            return plaintext;
        }
        catch (e) {
            throw new Error('Decrypt failed');
        }
    }
};
export const LicenseManager = Object.freeze({
    verify: LicenseManagerImp.verify,
    check: LicenseManagerImp.check
});
//# sourceMappingURL=data:application/json;base64,